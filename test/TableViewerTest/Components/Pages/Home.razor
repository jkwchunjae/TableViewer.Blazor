@page "/"
@using System.Text.Json
@inject IJSRuntime Js

<PageTitle>Home</PageTitle>

Welcome to your new app.

<div style="padding-left: 10vw;">
    @if (open)
    {
<TableViewer Data="test" Options="optionForTest"/>

<TableViewer Data="person" Options="personOption"/>

@if (optionForPeople != null)
{
    <TableViewer Data="people" Options="optionForPeople"/>
}

<TableViewer Data="peopleRecord"/>
    }
</div>


@code {
    object test = new object? [] {null, 2, null, 2, 3,};
    TvOptions optionForTest = new TvOptions
    {
        Actions = new List<ITvAction>()
        {
            new TvDoubleClickAction<int>
            {
                Label = "Console log",
                Condition = (number, depth) => true,
                Action = number =>
                {
                    Console.WriteLine(number);
                    return Task.CompletedTask;
                },
                SecondStyle = new TvSecondButtonStyle
                {
                    Variant = Variant.Filled,
                },
            },
        },
    };
    TvOptions? optionForPeople = null;
    Person person = new Person
        {
            Id = 213,
            Name = "User name",
            Attributes = new Dictionary<string, object>
            {
                ["age"] = 12,
            },
        };
    TvOptions personOption = new TvOptions
    {
        ColumnVisible = new []
        {
            new TvColumnVisibleOption
            {
                Before = ["Id", "Name", "Attributes"],
                After = ["Id", "Name"],
            },
        },
    };

    Person[] people = new Person[]
    {
        new Person
        {
            Id = 213,
            Name = "User name",
            Birth = DateTime.UtcNow,
            Attributes = new Dictionary<string, object>
            {
                ["age"] = 12,
                ["true"] = true,
                ["false"] = false,
            },
            People = new PersonRecord[]
            {
                new PersonRecord(
                    Id: 213,
                    Name: "User name",
                    Attributes: new Dictionary<string, object>
                    {
                        ["age"] = 12,
                        ["true"] = true,
                        ["false"] = false,
                    }
                ),
                new PersonRecord(
                    Id: 213,
                    Name: "User 2",
                    Attributes: new Dictionary<string, object>
                    {
                        ["age"] = 12,
                        ["true"] = true,
                        ["false"] = false,
                    }
                ),
            }
        },
        new Person
        {
            Id = 999,
            Name = "second name",
            Birth = new DateTime(1989, 2, 1, 5, 12, 1, DateTimeKind.Utc),
            Attributes = new Dictionary<string, object>
            {
                ["age"] = 12,
                ["location"] = "France",
            },
        },
    };

    PersonRecord[] peopleRecord = new PersonRecord[]
    {
        null,
        new PersonRecord(
            Id: 0,
            Name: null,
            Attributes: null
        ),
        new PersonRecord(
            Id: 213,
            Name: "User name",
            Attributes: new Dictionary<string, object>
            {
                ["age"] = 12,
                ["true"] = true,
                ["false"] = false,
            }
        ),
        new PersonRecord(
            Id: 999,
            Name: "second name",
            Attributes: new Dictionary<string, object>
            {
                ["age"] = 12,
                ["location"] = "France",
            }
        ),
    };

    protected override Task OnInitializedAsync()
    {
        optionForPeople = new TvOptions
        {
            OpenDepth = 1,
            Actions = new List<ITvAction>()
            {
                new TvDoubleClickAction<Person>
                {
                    Condition = (person, depth) => true,
                    Label = "Console log person",
                    Action = async (person) =>
                    {
                        await ConsoleWrite(person);
                    },
                    ResetDelay = TimeSpan.FromSeconds(1),
                    Style = new TvButtonStyle
                    {
                        StartIcon = Icons.Material.Filled.Person,
                        IconSize = Size.Small,
                        SuperDense = false,
                    },
                    SecondStyle = new TvSecondButtonStyle
                    {
                        Variant = Variant.Filled,
                        Color = Color.Tertiary,
                        IconColor = Color.Dark,
                    },
                },
                new TvAction<PersonRecord>
                {
                    Label = "Console log person record",
                },
            },
            ColumnVisible = new TvColumnVisibleOption[]
            {
                // new TvColumnVisibleOption
                // {
                //     Before = ["Id", "Name", "Attributes", "People"],
                //     After = ["Id", "Name"],
                // },
            },
            Editor = new ITvEditorOption[]
            {
                new TvYamlEditorOption<IEnumerable<PersonRecord>>(),
                // new TvYamlEditorOption<Dictionary<string, object>>(),
            },
        };

        open = true;
        return Task.CompletedTask;
    }

    private async Task ConsoleWrite(object obj)
    {
        await Js.InvokeVoidAsync("console.log", obj);
    }

    bool open = true;
}