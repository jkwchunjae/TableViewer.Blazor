@inherits TvViewBase

<div class="table-object">
  @if (Open)
  {
    List<string> classList = new()
    {
      "d-inline-block",
      (Options.Style.SuperDense ? "mud-table-super-dense" : string.Empty),
    };
    if (Depth == 1)
    {
      classList.AddRange(Options.Style.RootClass);
    }
    var classText = string.Join(" ", classList.Where(x => !string.IsNullOrWhiteSpace(x)));
  <MudSimpleTable
    Class="@classText"
    Dense="Options.Style.Dense"
    Hover="Options.Style.Hover"
    Striped="Options.Style.Striped"
    Bordered="Options.Style.Bordered"
  >
      <thead>
        <tr>
          <th class="tv-title-counter" colspan="2" @onclick="ToggleOpen">
            @if (Depth == 1 && !string.IsNullOrWhiteSpace(Options.Title))
            {
              <span class="tv-title">
                @Options.Title
              </span>
            }
            <span>
              @Items.Count() keys
            </span>
          </th>
        </tr>
      </thead>
      <tbody>
        @foreach (var (key, value, memberInfo) in Items)
        {
          <tr>
            <td class="name">@key</td>
            <td class="value">
              <TvElementView
                Parent="@this"
                Data="value"
                MemberInfo="memberInfo"
                Options="Options"
                Depth="Depth + 1"
                OpenDepth="@(ThisOpenDepth ?? OpenDepth)"
              />
            </td>
          </tr>
        }
      </tbody>
    </MudSimpleTable>
  }
  else
  {
    string classText = string.Empty;
    if (Options.Style.SuperDense)
    {
      classText += " mud-button-super-dense";
    }
    else if (Options.Style.Dense)
    {
      classText += " mud-button-dense";
    }
    <MudButton OnClick="ToggleOpen"
      Class="@classText"
      Variant="Variant.Outlined"
      Size="Size.Small"
    >
        object (@Items.Count() keys)
    </MudButton>
  }
</div>