@using TableViewerBlazor.Options.Property
@inherits TeEditorBase

@if (Data is int intValue)
{
    TeNumericFieldProperty<int> property = GetNumberFieldProperty<int>();
    <MudNumericField
        T="int"
        Value="intValue"
        ValueChanged="@(async value => await OnValueChanged(value))"
        Label="@Label"
        Validation="@(new Func<int, Task<IEnumerable<string>>>(NumericFieldValidation))"

        Min="@property.Min"
        Max="@property.Max"
        Required="@property.Required"
        Pattern="@property.Pattern"
        Adornment="@property.Adornment"
        AdornmentIcon="@property.AdornmentIcon"
        AdornmentText="@property.AdornmentText"
        AutoFocus="@property.AutoFocus"
        Clearable="@property.Clearable"
        Culture="@property.Culture"
        DebounceInterval="@property.DebounceInterval"
        Disabled="@property.Disabled"
        Format="@property.Format"
        HelperText="@property.HelperText"
        HelperTextOnFocus="@property.HelperTextOnFocus"
        Immediate="@property.Immediate"
        InputMode="@property.InputMode"
        InvertMouseWheel="@property.InvertMouseWheel"
        Placeholder="@property.Placeholder"
        ReadOnly="@property.ReadOnly"
        Step="@property.Step"
        AdornmentAriaLabel="@property.AdornmentAriaLabel"
        AdornmentColor="@property.AdornmentColor"
        DisableUnderLine="@property.DisableUnderLine"
        FullWidth="@property.FullWidth"
        HideSpinButtons="@property.HideSpinButtons"
        IconSize="@property.IconSize"
        Margin="@property.Margin"
        ShrinkLabel="@property.ShrinkLabel"
        Variant="@property.Variant"
        Class="@property.Class"
        Style="@property.Style"
    />
}
else if (Data is long longValue)
{
    TeNumericFieldProperty<long> property = GetNumberFieldProperty<long>();
    <MudNumericField
        T="long"
        Value="longValue"
        ValueChanged="@(async value => await OnValueChanged(value))"
        Label="@Label"
        Validation="@(new Func<long, Task<IEnumerable<string>>>(NumericFieldValidation))"

        Min="@property.Min"
        Max="@property.Max"
        Required="@property.Required"
        Pattern="@property.Pattern"
        Adornment="@property.Adornment"
        AdornmentIcon="@property.AdornmentIcon"
        AdornmentText="@property.AdornmentText"
        AutoFocus="@property.AutoFocus"
        Clearable="@property.Clearable"
        Culture="@property.Culture"
        DebounceInterval="@property.DebounceInterval"
        Disabled="@property.Disabled"
        Format="@property.Format"
        HelperText="@property.HelperText"
        HelperTextOnFocus="@property.HelperTextOnFocus"
        Immediate="@property.Immediate"
        InputMode="@property.InputMode"
        InvertMouseWheel="@property.InvertMouseWheel"
        Placeholder="@property.Placeholder"
        ReadOnly="@property.ReadOnly"
        Step="@property.Step"
        AdornmentAriaLabel="@property.AdornmentAriaLabel"
        AdornmentColor="@property.AdornmentColor"
        DisableUnderLine="@property.DisableUnderLine"
        FullWidth="@property.FullWidth"
        HideSpinButtons="@property.HideSpinButtons"
        IconSize="@property.IconSize"
        Margin="@property.Margin"
        ShrinkLabel="@property.ShrinkLabel"
        Variant="@property.Variant"
        Class="@property.Class"
        Style="@property.Style"
    />
}
else if (Data is float floatValue)
{
    TeNumericFieldProperty<float> property = GetNumberFieldProperty<float>();
    <MudNumericField
        T="float"
        Value="floatValue"
        ValueChanged="@(async value => await OnValueChanged(value))"
        Label="@Label"
        Validation="@(new Func<float, Task<IEnumerable<string>>>(NumericFieldValidation))"

        Min="@property.Min"
        Max="@property.Max"
        Required="@property.Required"
        Pattern="@property.Pattern"
        Adornment="@property.Adornment"
        AdornmentIcon="@property.AdornmentIcon"
        AdornmentText="@property.AdornmentText"
        AutoFocus="@property.AutoFocus"
        Clearable="@property.Clearable"
        Culture="@property.Culture"
        DebounceInterval="@property.DebounceInterval"
        Disabled="@property.Disabled"
        Format="@property.Format"
        HelperText="@property.HelperText"
        HelperTextOnFocus="@property.HelperTextOnFocus"
        Immediate="@property.Immediate"
        InputMode="@property.InputMode"
        InvertMouseWheel="@property.InvertMouseWheel"
        Placeholder="@property.Placeholder"
        ReadOnly="@property.ReadOnly"
        Step="@property.Step"
        AdornmentAriaLabel="@property.AdornmentAriaLabel"
        AdornmentColor="@property.AdornmentColor"
        DisableUnderLine="@property.DisableUnderLine"
        FullWidth="@property.FullWidth"
        HideSpinButtons="@property.HideSpinButtons"
        IconSize="@property.IconSize"
        Margin="@property.Margin"
        ShrinkLabel="@property.ShrinkLabel"
        Variant="@property.Variant"
        Class="@property.Class"
        Style="@property.Style"
    />
}
else if (Data is double doubleValue)
{
    TeNumericFieldProperty<double> property = GetNumberFieldProperty<double>();
    <MudNumericField
        T="double"
        Value="doubleValue"
        ValueChanged="@(async value => await OnValueChanged(value))"
        Label="@Label"
        Validation="@(new Func<double, Task<IEnumerable<string>>>(NumericFieldValidation))"

        Min="@property.Min"
        Max="@property.Max"
        Required="@property.Required"
        Pattern="@property.Pattern"
        Adornment="@property.Adornment"
        AdornmentIcon="@property.AdornmentIcon"
        AdornmentText="@property.AdornmentText"
        AutoFocus="@property.AutoFocus"
        Clearable="@property.Clearable"
        Culture="@property.Culture"
        DebounceInterval="@property.DebounceInterval"
        Disabled="@property.Disabled"
        Format="@property.Format"
        HelperText="@property.HelperText"
        HelperTextOnFocus="@property.HelperTextOnFocus"
        Immediate="@property.Immediate"
        InputMode="@property.InputMode"
        InvertMouseWheel="@property.InvertMouseWheel"
        Placeholder="@property.Placeholder"
        ReadOnly="@property.ReadOnly"
        Step="@property.Step"
        AdornmentAriaLabel="@property.AdornmentAriaLabel"
        AdornmentColor="@property.AdornmentColor"
        DisableUnderLine="@property.DisableUnderLine"
        FullWidth="@property.FullWidth"
        HideSpinButtons="@property.HideSpinButtons"
        IconSize="@property.IconSize"
        Margin="@property.Margin"
        ShrinkLabel="@property.ShrinkLabel"
        Variant="@property.Variant"
        Class="@property.Class"
        Style="@property.Style"
    />
}
else if (Data is decimal decimalValue)
{
    TeNumericFieldProperty<decimal> property = GetNumberFieldProperty<decimal>();
    <MudNumericField
        T="decimal"
        Value="decimalValue"
        ValueChanged="@(async value => await OnValueChanged(value))"
        Label="@Label"
        Validation="@(new Func<decimal, Task<IEnumerable<string>>>(NumericFieldValidation))"

        Min="@property.Min"
        Max="@property.Max"
        Required="@property.Required"
        Pattern="@property.Pattern"
        Adornment="@property.Adornment"
        AdornmentIcon="@property.AdornmentIcon"
        AdornmentText="@property.AdornmentText"
        AutoFocus="@property.AutoFocus"
        Clearable="@property.Clearable"
        Culture="@property.Culture"
        DebounceInterval="@property.DebounceInterval"
        Disabled="@property.Disabled"
        Format="@property.Format"
        HelperText="@property.HelperText"
        HelperTextOnFocus="@property.HelperTextOnFocus"
        Immediate="@property.Immediate"
        InputMode="@property.InputMode"
        InvertMouseWheel="@property.InvertMouseWheel"
        Placeholder="@property.Placeholder"
        ReadOnly="@property.ReadOnly"
        Step="@property.Step"
        AdornmentAriaLabel="@property.AdornmentAriaLabel"
        AdornmentColor="@property.AdornmentColor"
        DisableUnderLine="@property.DisableUnderLine"
        FullWidth="@property.FullWidth"
        HideSpinButtons="@property.HideSpinButtons"
        IconSize="@property.IconSize"
        Margin="@property.Margin"
        ShrinkLabel="@property.ShrinkLabel"
        Variant="@property.Variant"
        Class="@property.Class"
        Style="@property.Style"
    />
}
